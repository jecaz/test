Git vezba

git add - in order to begin tracking a new file, you use the command git add.

git commit - if everything is staged, you are ready to commit your changes.

git diff - to see what youâ€™ve changed but not yet staged.

git rm -f <filename> - If you modified the file and added it to the index already, you must force 				the removal with the -f.

git commit --amend - If you commit and then realize you forgot to stage the changes in a file you 			     wanted to add to this commit, you can use this command.

git reset HEAD <filename> - use this command to unstage.

git checkout -- <filename> - to discard changes in working directory.

git clone URL - clone remote repository.

git remote add <shortname> <url> - to add a new remote Git repository  as a shortname.

git remote -v - shows you the URLs that Git has stored for the shortname to be used when reading 			and writing to that remote.

git remote rename [remote-name from] [remote-name to] - you can run this command to change a 								remote's shortname. For instance, if you 								want to rename origin to orig or something 								else.

git fetch [remote-name] - use to get data from your remote projects and pull down all the data 				  from that remote project that you don't have yet. This command only 				  downloads the data to your local repository - it doesn't automatically 				  merge it with any of your work or modifiy what you're currently working 				  on.

git merge [remotename/branchname] - combines your local changes with changes made by others. 					    Typically, you'd merge a remote-tracking branch (i.e., a 					    branch fetched from a remote repository) with your local 					    branch.

git pull [remote-name(origin)] [branchname(master)] - chortcut for completing both git fetch and 							      git merge in the same command.

git push [remote-name(origin)] [branch-name(master)] - when you have your porject at a point that 							       you want to share, you have to push it 							       upstream.

git remote show [remote-name(origin)] - if you want to see more information about a particular 						remote.

git remote rm [remote-name(origin)] - if you want to remove a remote for some reason.

git tag -a(annotated tag) v0.1 [commit sha] - if you forgot to tag some commit, you can do it 						      afterwards by this command. You can firs list all 					      commits with command git log --pretty= oneline

git show v0.1 - to see specified tag.

git push origin [tagname] - you have to explicitly push tags to a shared server after you have 				    created them.

git config --global alias.ci commit - this means instead of typing git commit, you just need to 				      type git ci.

git config --global alias.unstage 'reset HEAD --' - this makes the following two commands 							    equivalent: git unstage fileA or git reset 							    HEAD -- fileA

git config --global alias.last 'log -1 HEAD' - you can see the last commit with git last.

After setting up a repo on Github, there seems to be two ways to pull that repo into a local repo.

Firstly, I could create a directory, initialize a blank repo, add a remote and then pull changes from the remote.

> mkdir "test"
> cd "test"
> git init
> git remote add origin https://github.com/jecaz/test.git
> git pull origin master

Secondly, I could clone the remote.

> git clone git@github.com:exampleUser/exampleProject.git

git branch [new branch-name] - create a new branch.

git checkout testing - to switch to an existing branch.

git vim [filename] - make changes in the file.

git commit -a -m 'made other changes' - this command do both, git add and commit

git log --oneline --decorate --graph --all - this will print out the history of your commits, 						     showing where your branch pointers are and how your 						     history has diverged.

git checkout -b isss53 - shorthand for:
					git branch iss53
					git checkout iss53

git lot -1 HEAD - see your last commit




